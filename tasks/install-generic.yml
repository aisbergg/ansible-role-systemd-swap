---
- name: Install requirements
  package:
    name: ["make", "git"]
    state: present

- name: Get installed version
  shell: |
    set -o pipefail
    if [ -d /usr/local/src/systemd-swap ]; then
        cd /usr/local/src/systemd-swap
        git tag --sort='v:refname' | tail -n1
    else
        echo -n '0'
    fi
  args:
    executable: /bin/bash
  register: installed_version
  failed_when: false
  changed_when: false

- name: Check what the latest version is
  shell: |
    set -o pipefail
    git ls-remote --tags --refs {{ systemd_swap_repository }} | sed 's/.*\///' | sort -V | tail -n1
  args:
    executable: /bin/bash
  register: latest_version
  failed_when: latest_version.rc != 0
  changed_when: false
  when: systemd_swap_version == 'latest'

- name: Define version to install
  set_fact:
    version_to_install: "{{ latest_version.stdout_lines[0] if systemd_swap_version == 'latest' else systemd_swap_version }}"

- block:
    - name: Ensure source directory exists
      file:
        state: directory
        path: /usr/local/src

    - name: Clone source code
      git:
        repo: "{{ systemd_swap_repository }}"
        version: "{{ version_to_install }}"
        clone: true
        depth: 1
        force: true
        dest: /usr/local/src/systemd-swap

    - name: "Install systemd-swap version {{ version_to_install }}"
      command: "make -C /usr/local/src/systemd-swap install"
      register: install_systemd_swap
      failed_when: install_systemd_swap.rc != 0
      changed_when: true
      notify: restart systemd-swap

    - name: Reload systemd configs
      systemd:
        daemon_reload: yes
      notify: restart systemd-swap

  when: version_to_install != installed_version.stdout_lines[0] or systemd_swap_force_reinstall
